;; quicksettings.yuck

;; --- Variables ---
(deflisten audio_devices :initial '[]' "bash scripts/audio listen sinks")
(deflisten input_devices :initial '[]' "bash scripts/audio listen sources")
(defpoll volume_level :initial 100 :interval "1s" "bash scripts/audio get-volume sinks")
(defpoll mic_volume_level :initial 100 :interval "1s" "bash scripts/audio get-volume sources")
(defpoll volume_muted :initial "no" :interval "1s" "bash scripts/audio get-mute sinks")
(defpoll mic_muted :initial "no" :interval "1s" "bash scripts/audio get-mute sources")
(defpoll airplane_status :initial "false" :interval "1h" "bash scripts/airplane status")
(defpoll privacy_status :initial '{"camera": "unblocked", "microphone": "unblocked"}' :interval "999h" "bash scripts/privacy status")
(defpoll power_profile_data :interval "5s" :initial '{"profile": "unknown", "icon": "assets/power_profile_balanced", "is_active": false, "sub_text": "Unknown"}' "bash scripts/power_profile.sh")

(defvar brightness_level 100)
(defvar show_power_menu false)
(defvar show_sound_output_menu false)
(defvar show_sound_input_menu false)
(defvar active_menu "none")

(defpoll wifi_enabled :initial "false" :interval "3s" "bash scripts/wifi status")
(defpoll wifi_network_name :interval "3s" "bash scripts/wifi ssid")
(deflisten wifi_networks :initial '[]' "bash scripts/wifi listen")

(defpoll bluetooth_enabled :initial "false" :interval "3s" "bash scripts/bluetooth status")
(defpoll bluetooth_devices :initial "[]" :interval "5s" "bash scripts/bluetooth list")
(defpoll bluetooth_connected_device :interval "5s" :initial "" "bash scripts/bluetooth get-connected-name")
(defpoll bluetooth_connected_count :initial 0 :interval "5s" "bash scripts/bluetooth list | jq '[.[] | select(.connected)] | length'")

(deflisten vpn_data :initial '{"connections": [], "enabled": false, "name": "Not Connected"}' "bash scripts/vpn-listen")

;; --- Widgets ---
(defwidget qs_toggle_button [icon text ?sub_text ?is-active]
  (eventbox :class "btn-container" :cursor "pointer"
    (box :class "qs-toggle ${is-active ? 'active' : ''}" :hexpand true
      (box :orientation "h" :space-evenly false :spacing 15
        (image :path "${icon}${is-active ? '' : '_passive'}.svg" :image-width 20)
        (box :orientation "v" :space-evenly false :halign "start" :hexpand true :valign "center"
          (label :text text :halign "start" :hexpand true)
          (box :visible {sub_text != ""}
            (label :text sub_text :class "subtext" :halign "start")))))))

(defwidget qs_double_button [icon main_text ?sub_text ?is-active ?button_click ?next_click]
  (box :class "qs-double-wrapper" :orientation "h" :space-evenly false :spacing 0
    (eventbox :class "btn-container" :cursor "pointer" :hexpand true :onclick button_click
      (box :class "qs-toggle qs-double-main ${is-active ? 'active' : ''}"
        (box :orientation "h" :space-evenly false :spacing 15
          (image :path "${icon}${is-active ? '' : '_passive'}.svg" :image-width 17)
          (box :orientation "v" :space-evenly false :halign "start" :hexpand true :valign "center"
            (label :text main_text :halign "start")
            (box :visible {sub_text != ""} 
              (label :text sub_text :class "subtext" :halign "start"))))))
    (eventbox :class "btn-container" :cursor "pointer" :onclick next_click
      (box :class "qs-toggle qs-double-arrow ${is-active ? 'active' : ''}"
        (image :path "assets/next${is-active ? '_black' : '_passive'}.svg" :image-width 14)))))

(defwidget sound_output_menu []
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/audio_blue.svg" :image-width 25)
      (label :text "Sound Output" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 5 :class "sound-output-list"
      (for device in audio_devices
        (eventbox :class "sound-output-item ${device.active ? 'active' : ''}" :onclick "bash scripts/audio set sinks \"${device.name}\" && eww -с ~/eww-config update audio_devices=\"$(bash scripts/audio list sinks)\"" :cursor "pointer"
          (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
            (image :path "assets/${device.type}.svg" :image-width 16)
            (label :text "${device.type} – ${device.name}" :limit-width 35 :halign "start" :hexpand true)
            (image :visible {device.active} :path "assets/tick.svg" :image-width 14)))))
    (box :orientation "v" :space-evenly false :spacing 5
        (box :class "separator")
        (eventbox :class "sound-output-settings-link" :cursor "pointer" :onclick "pavucontrol &"
            (label :class "sound-settings" :text "Sound Settings" :halign "start")))))

(defwidget sound_input_menu []
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/microphone_high_sound.svg" :image-width 25)
      (label :text "Sound Input" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 5 :class "sound-output-list"
      (for device in input_devices
        (eventbox :class "sound-output-item ${device.active ? 'active' : ''}" :onclick "bash scripts/audio set sources \"${device.name}\" && eww update input_devices=\"$(bash scripts/audio list sources)\" && eww update mic_volume_level=\"$(bash scripts/audio get-volume sources)\" && eww update mic_muted=\"$(bash scripts/audio get-mute sources)\"" :cursor "pointer"
          (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
            (image :path "assets/microphone_high_sound.svg" :image-width 16)
            (label :text "${device.type} – ${device.name}" :limit-width 35 :halign "start" :hexpand true)
            (image :visible {device.active} :path "assets/tick.svg" :image-width 14)))))
    (box :orientation "v" :space-evenly false :spacing 5
        (box :class "separator")
        (eventbox :class "sound-output-settings-link" :cursor "pointer" :onclick "pavucontrol &"
            (label :class "sound-settings" :text "Sound Settings" :halign "start")))))

(defwidget wifi_menu []
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15 :hexpand true
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/network-strong_passive.svg" :image-width 25)
      (label :text "Wi-Fi" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 5 :class "sound-output-list"
        (for network in wifi_networks
            (eventbox :class "sound-output-item ${network.active ? 'active' : ''}" :cursor "pointer"
                :onclick {network.protected ? "bash scripts/try_connect_wifi '${network.ssid}' &" : "bash scripts/wifi connect '${network.ssid}'"}
                (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
                    (overlay
                        (box :style "padding: 0 4px 4px 0;"
                            (image :path "assets/${network.icon}_passive.svg" :image-width 16))
                        (box :visible {network.protected} :halign "end" :valign "end"
                            (image :path "assets/lock_passive.svg" :image-width 10)))
                    (label :text "${network.ssid}" :halign "start" :hexpand true)
                    (image :visible {network.active} :path "assets/tick.svg" :image-width 14)))))
    (box :orientation "v" :space-evenly false :spacing 5
        (box :class "separator")
        (eventbox :class "sound-output-settings-link" :cursor "pointer" :onclick "nm-connection-editor &"
            (label :class "sound-settings" :text "All Networks" :halign "start")))))

(defwidget bluetooth_menu []
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15 :hexpand true
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/bluetooth_on_passive.svg" :image-width 25)
      (label :text "Bluetooth" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 5 :class "sound-output-list"
      (box :visible {bluetooth_devices == "[]"}
        (label :text "No paired devices found." :class "subtext" :halign "center" :style "margin: 10px 0;"))
      (box :orientation "v" :space-evenly false :spacing 5 :visible {bluetooth_devices != "[]"}
        (for device in bluetooth_devices
          (privacy_toggle
            :icon "assets/bluetooth_on_passive.svg"
            :text {device.name}
            :state {device.connected}
            :onclick "bash scripts/bluetooth ${device.connected ? 'disconnect' : 'connect'} ${device.mac} && eww update bluetooth_devices=\"$(bash scripts/bluetooth list)\" && eww update bluetooth_connected_device=$(bash scripts/bluetooth get-connected-name) && eww update bluetooth_connected_count=$(bash scripts/bluetooth list | jq '[.[] | select(.connected)] | length') &"))))
    (box :orientation "v" :space-evenly false :spacing 5
        (box :class "separator")
        (eventbox :class "sound-output-settings-link" :cursor "pointer" :onclick "blueberry &"
            (label :class "sound-settings" :text "Bluetooth Settings" :halign "start")))))

(defwidget vpn_menu [connections]
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15 :hexpand true
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/vpn_passive.svg" :image-width 25)
      (label :text "VPN" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 5 :class "sound-output-list"
      (for connection in connections
        (eventbox :class "sound-output-item ${connection.active ? 'active' : ''}" 
                  :onclick {
                    connection.type == "nmcli" ? 
                      "bash scripts/vpn ${connection.active ? 'disconnect' : 'connect'} '${connection.name}' &" :
                      "bash scripts/vpn ${connection.active ? 'disconnect-singbox' : 'connect-singbox'} '${connection.name}' &"
                  }
                  :cursor "pointer"
          (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
            (image :path "assets/vpn_passive.svg" :image-width 16)
            (label :text "${connection.name}" :halign "start" :hexpand true :limit-width 35)
            (image :visible {connection.active} :path "assets/tick.svg" :image-width 14)))))))

(defwidget power_menu []
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/power_off.svg" :image-width 25)
      (label :text "Power Off" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 5 :class "sound-output-list"
      (eventbox :class "sound-output-item" :onclick "systemctl suspend" :cursor "pointer"
        (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
          (label :text "Suspend" :halign "start" :hexpand true)))
      (eventbox :class "sound-output-item" :onclick "systemctl reboot" :cursor "pointer"
        (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
          (label :text "Restart..." :halign "start" :hexpand true)))
      (eventbox :class "sound-output-item" :onclick "systemctl poweroff" :cursor "pointer"
        (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
          (label :text "Power Off..." :halign "start" :hexpand true)))
      (box :class "separator" :style "margin: 5px 0;")
      (eventbox :class "sound-output-item" :onclick "bspc quit" :cursor "pointer"
        (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
          (label :text "Log Out..." :halign "start" :hexpand true)))
      (eventbox :class "sound-output-item" :onclick "dbus-send --system --dest=org.freedesktop.DisplayManager --print-reply /org/freedesktop/DisplayManager/Seat0 org.freedesktop.DisplayManager.Seat.SwitchToGreeter" :cursor "pointer"
        (box :class "sound-output-item-box" :orientation "h" :space-evenly false :spacing 10
          (label :text "Switch User..." :halign "start" :hexpand true))))))

(defwidget privacy_toggle [icon text state ?onclick]
  (box :class "privacy-toggle-item" :space-evenly false
    (box :orientation "h" :space-evenly false :spacing 15 :hexpand true
      (box :class "privacy-toggle-icon"
        (image :path "${icon}" :image-width 16))
      (label :text text :limit-width 35 :halign "start" :hexpand true))
    (eventbox :cursor "pointer"
              :onclick onclick
      (box :class "toggle-track ${state ? 'on' : 'off'}"
        (box :class "toggle-thumb"
             :halign "${state ? 'end' : 'start'}")))))

(defwidget privacy_menu []
  (box :class "sound-output-menu" :orientation "v" :space-evenly false :spacing 15
    (box :orientation "h" :space-evenly false :spacing 15 :halign "start"
      (image :path "assets/privacy_passive.svg" :image-width 25)
      (label :text "Privacy Controls" :class "sound-output-header" :halign "start"))
    (box :orientation "v" :space-evenly false :spacing 15 :class "sound-output-list"
      (privacy_toggle
        :icon "assets/eye_passive.svg"
        :text "Camera"
        :state {privacy_status.camera == "blocked"}
        :onclick "bash scripts/privacy toggle-camera && eww update privacy_status=\"$(bash scripts/privacy status)\"")
      (privacy_toggle
        :icon "assets/microphone_high_sound.svg"
        :text "Microphone"
        :state {privacy_status.microphone == "blocked"}
        :onclick "bash scripts/privacy toggle-mic && eww update privacy_status=\"$(bash scripts/privacy status)\""))))

(defwidget qs_toggles_grid []
  (box :class "qs-toggles-grid" :orientation "v" :space-evenly false :spacing 10
    ;; Wi-Fi and Bluetooth block
    (box :orientation "v" :space-evenly false :spacing 0
      (box :orientation "h" :spacing 10
        (qs_double_button
          :icon "assets/network-strong"
          :main_text "Wi-Fi"
          :sub_text {wifi_network_name ?: "Not Connected"}
          :is-active {wifi_enabled}
          :button_click "eww update wifi_enabled=${!wifi_enabled} && bash scripts/wifi toggle"
          :next_click "eww update active_menu='${active_menu == "wifi" ? "none" : "wifi"}'")
        (qs_double_button
          :icon "assets/bluetooth_on"
          :main_text "Bluetooth"
          :sub_text { bluetooth_enabled == "true" ? (bluetooth_connected_count > 1 ? "${bluetooth_connected_count} connected" : bluetooth_connected_device ?: "On") : "Off" }
          :is-active {bluetooth_enabled}
          :button_click "bash scripts/bluetooth toggle && eww update bluetooth_enabled=$(bash scripts/bluetooth status) && eww update bluetooth_connected_device=$(bash scripts/bluetooth get-connected-name) && eww update bluetooth_devices=\"$(bash scripts/bluetooth list)\" && eww update bluetooth_connected_count=$(bash scripts/bluetooth list | jq '[.[] | select(.connected)] | length') &"
          :next_click "eww update active_menu='${active_menu == "bluetooth" ? "none" : "bluetooth"}'"))
      (revealer :transition "slidedown" :reveal {active_menu == "wifi"}
          (wifi_menu))
      (revealer :transition "slidedown" :reveal {active_menu == "bluetooth"}
          (bluetooth_menu)))

    ;; Power Mode and Privacy block
    (box :orientation "v" :space-evenly false :spacing 0
      (box :orientation "h" :spacing 10
        ;; Power Mode
        (eventbox :onclick "eww update power_profile_data=\"$(bash scripts/power_profile.sh toggle)\" &"
          (qs_toggle_button
            :icon {power_profile_data.icon}
            :text "Power Mode"
            :sub_text {power_profile_data.sub_text}
            :is-active {power_profile_data.is_active}))
        
        ;; Privacy
        (box :orientation "v" :space-evenly false :spacing 0
          (qs_double_button
            :icon "assets/privacy"
            :main_text "Privacy"
            :sub_text "${privacy_status.camera == 'blocked' && privacy_status.microphone == 'blocked' ? 'All Blocked' : 
                       privacy_status.camera == 'blocked' ? 'Camera' :
                       privacy_status.microphone == 'blocked' ? 'Microphone' : 'All Allowed'}"
            :is-active {privacy_status.camera == "blocked" || privacy_status.microphone == "blocked"}
            :button_click "eww update active_menu='${active_menu == "privacy" ? "none" : "privacy"}'"
            :next_click "eww update active_menu='${active_menu == "privacy" ? "none" : "privacy"}'"))
      )
      (revealer :transition "slidedown" :reveal {active_menu == "privacy"}
          (privacy_menu)))

    ;; VPN and Airplane Mode block
    (box :orientation "v" :space-evenly false :spacing 0
      (box :orientation "h" :spacing 10
        (qs_double_button
          :icon "assets/vpn"
          :main_text "VPN"
          :sub_text {vpn_data.name ?: "Not Connected"}
          :is-active {vpn_data.enabled}
          :button_click "bash scripts/vpn toggle &"
          :next_click "eww update active_menu='${active_menu == "vpn" ? "none" : "vpn"}'")
        (eventbox :onclick "bash scripts/airplane toggle &"
          (qs_toggle_button
            :icon "assets/airplane"
            :text "Airplane Mode"
            :is-active {airplane_status == "true"})))
      (revealer :transition "slidedown" :reveal {active_menu == "vpn"}
          (vpn_menu :connections {vpn_data.connections})))))

(defwidget quicksettings []
  (box :class "qs-container" :orientation "v" :space-evenly false :spacing 20 :valign "start"
    ;; Header: Battery + Action Buttons
    (box :orientation "v" :space-evenly false
      (box :class "qs-header" :orientation "h" :space-evenly false
          (box :halign "start" :hexpand "true"
            (eventbox :class "btn-container"
              (box :class "qs-action-btn" :orientation "h" :space-evenly false :spacing 10
                  (image :image-width 20 :path {
                    battery.status == "Charging" ? (
                      battery.capacity >= 100 ? "assets/battery-level-100-charged_blue.svg" :
                      battery.capacity >= 90 ? "assets/battery-level-90-charging_blue.svg" :
                      battery.capacity >= 80 ? "assets/battery-level-80-charging_blue.svg" :
                      battery.capacity >= 70 ? "assets/battery-level-70-charging_blue.svg" :
                      battery.capacity >= 60 ? "assets/battery-level-60-charging_blue.svg" :
                      battery.capacity >= 50 ? "assets/battery-level-50-charging_blue.svg" :
                      battery.capacity >= 40 ? "assets/battery-level-40-charging_blue.svg" :
                      battery.capacity >= 30 ? "assets/battery-level-30-charging_blue.svg" :
                      battery.capacity >= 20 ? "assets/battery-level-20-charging_blue.svg" :
                      "assets/battery-level-10-charging_blue.svg"
                    ) : (
                      battery.capacity >= 100 ? "assets/battery-level-100_blue.svg" :
                      battery.capacity >= 90 ? "assets/battery-level-90_blue.svg" :
                      battery.capacity >= 80 ? "assets/battery-level-80_blue.svg" :
                      battery.capacity >= 70 ? "assets/battery-level-70_blue.svg" :
                      battery.capacity >= 60 ? "assets/battery-level-60_blue.svg" :
                      battery.capacity >= 50 ? "assets/battery-level-50_blue.svg" :
                      battery.capacity >= 40 ? "assets/battery-level-40_blue.svg" :
                      battery.capacity >= 30 ? "assets/battery-level-30_blue.svg" :
                      battery.capacity >= 20 ? "assets/battery-level-20_blue.svg" :
                      "assets/battery-level-10_blue.svg"
                    )
                  })
                  (label :class "battery-pecentage" :text "${battery.capacity}%"))))
          (box :class "qs-header-actions" :halign "end" :spacing 5
              (eventbox :class "btn-container" :cursor "pointer" :onclick "xsecurelock &"
                (box :class "qs-action-btn" (image :path "assets/lock_screen.svg" :image-width 22)))
              (eventbox :class "btn-container" :cursor "pointer" :onclick "eww update show_power_menu=${!show_power_menu}"
                (box :class "qs-action-btn" (image :path "assets/power_off.svg" :image-width 22)))))
      (revealer :transition "slidedown" :reveal {show_power_menu}
          (power_menu)))

    ;; Main Content
    (box :orientation "v" :space-evenly false :spacing 10 :valign "start"
        ;; Volume Control
        (box :orientation "v" :space-evenly false
            (box :class "qs-slider-container" :orientation "h" :space-evenly false :spacing 15
                (eventbox :class "btn-container" :cursor "pointer" :onclick "bash scripts/audio toggle-mute sinks && eww update volume_muted=$(bash scripts/audio get-mute sinks)"
                (box :class "qs-slider-icon-btn" (image :path {volume_muted == "yes" || volume_level == 0 ? "assets/audio-muted_blue.svg" : volume_level > 50 ? "assets/audio_blue.svg" : "assets/audio-half_blue.svg"} :image-width 14)))
                (scale :min 0 :max 101 :value {volume_muted == "yes" ? 0 : volume_level} :onchange "bash scripts/audio set-volume sinks {} && eww update volume_level=$(bash scripts/audio get-volume sinks)" :class "qs-slider" :hexpand true)
                (eventbox :class "btn-container" :cursor "pointer" :onclick "eww update show_sound_output_menu=${!show_sound_output_menu}"
                (box :class "qs-slider-icon-btn" (image :path "assets/next.svg" :image-width 14))))
            (revealer :transition "slidedown" :reveal {show_sound_output_menu}
                (sound_output_menu)))
        
        ;; Microphone Control
        (box :orientation "v" :space-evenly false
            (box :class "qs-slider-container" :orientation "h" :space-evenly false :spacing 15
                (eventbox :class "btn-container" :cursor "pointer" :onclick "bash scripts/audio toggle-mute sources && eww update mic_muted=$(bash scripts/audio get-mute sources)"
                (box :class "qs-slider-icon-btn" (image :path {mic_muted == "yes" || mic_volume_level == 0 ? "assets/microphone_no_sound.svg" : mic_volume_level > 66 ? "assets/microphone_high_sound.svg" : mic_volume_level > 33 ? "assets/microphone_medium_sound.svg" : "assets/microphone_low_sound.svg"} :image-width 14)))
                (scale :min 0 :max 101 :value {mic_muted == "yes" ? 0 : mic_volume_level} :onchange "bash scripts/audio set-volume sources {} && eww update mic_volume_level=$(bash scripts/audio get-volume sources)" :class "qs-slider" :hexpand true)
                (eventbox :class "btn-container" :cursor "pointer" :onclick "eww update show_sound_input_menu=${!show_sound_input_menu}"
                (box :class "qs-slider-icon-btn" (image :path "assets/next.svg" :image-width 14))))
            (revealer :transition "slidedown" :reveal {show_sound_input_menu}
                (sound_input_menu)))

        ;; Brightness Control
        (box :class "qs-slider-container" :orientation "h" :space-evenly false :spacing 15
            (eventbox :class "btn-container" :cursor "pointer"
            (box :class "qs-slider-icon-btn" (image :path "assets/brightness.svg" :image-width 14)))
            (scale :min 0 :max 101 :value brightness_level :onchange "eww update brightness_level={} && bash scripts/debounce_brightness.sh {}" :class "qs-slider" :hexpand true)
            (eventbox :class "btn-container" :cursor "pointer"
            (box :class "qs-slider-icon-btn" (image :path "assets/next.svg" :image-width 14))))
        
        ;; Toggles Grid
        (qs_toggles_grid))))